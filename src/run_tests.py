"""
Automatiz√°lt API tesztfuttat√°s √©s riport√°l√°s

Ez a script a k√∂zponti orchestrator, ami "egy gombnyom√°sra" mindent elv√©gez:
1. L√©trehozza a sz√ºks√©ges mapp√°kat
2. Futtatja az √∂sszes pytest tesztet
3. Gener√°l JSON √©s HTML riportokat
4. Elk√©sz√≠ti az egyedi dashboardot
5. R√©szletes √∂sszefoglal√≥t ad a konzolra

Haszn√°lat:
    cd src
    python run_tests.py

A script exit code-dal t√©r vissza:
- 0: minden teszt sikeres
- 1: legal√°bb egy teszt elbukott vagy hiba t√∂rt√©nt
"""
import subprocess
import os
import sys
from datetime import datetime
from report_generator import generate_dashboard

def print_header():
    """Fejl√©c ki√≠r√°sa"""
    print("\n" + "="*60)
    print("üß™ API TESZTEL√âSI KERETRENDSZER")
    print("TMDB API Automatiz√°lt Tesztel√©s")
    print("="*60 + "\n")

def run_tests_with_reports():
    """
    Tesztek futtat√°sa √©s riportok gener√°l√°sa
    
    L√©p√©sek:
    1. pytest futtat√°s JSON √©s HTML riporttal
    2. Egyedi dashboard gener√°l√°s
    3. Eredm√©nyek √∂sszegz√©se
    """
    
    print_header()
    
    # Mapp√°k l√©trehoz√°sa (projekt gy√∂k√©rben)
    os.makedirs('../reports', exist_ok=True)
    os.makedirs('../dashboard', exist_ok=True)
    
    # Id≈ëb√©lyeg a riportokhoz
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # F√°jlnevek (relat√≠v √∫tvonal a projekt gy√∂k√©rhez)
    json_report = f'../reports/report_{timestamp}.json'
    html_report = f'../reports/report_{timestamp}.html'
    
    print(f"üìÖ Futtat√°s id≈ëpontja: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ JSON riport: {json_report}")
    print(f"üìÅ HTML riport: {html_report}")
    print("\n" + "-"*60 + "\n")
    
    # Pytest futtat√°s
    print("üöÄ Tesztek futtat√°sa...\n")
    
    result = subprocess.run([
        'pytest',
        'test_cases.py',
        '-v',
        '--json-report',
        f'--json-report-file={json_report}',
        '--html=' + html_report,
        '--self-contained-html'
    ], capture_output=False)
    
    print("\n" + "-"*60 + "\n")
    
    # Eredm√©ny ellen≈ërz√©s - JSON l√©trej√∂tt-e
    if not os.path.exists(json_report):
        print("‚ùå HIBA: JSON riport nem j√∂tt l√©tre!")
        print("   Ellen≈ërizd, hogy a pytest-json-report telep√≠tve van.")
        return 1
    
    # Dashboard gener√°l√°s
    print("üìä Egyedi dashboard gener√°l√°sa...\n")
    
    try:
        generate_dashboard(
            json_filepath=json_report,
            output_filepath=None  # Automatikus id≈ëb√©lyeges n√©v, ../dashboard/ mapp√°ba
        )
    except Exception as e:
        print(f"‚ùå HIBA a dashboard gener√°l√°s sor√°n: {e}")
        return 1
    
    # √ñsszegz√©s
    print("\n" + "="*60)
    print("üìã TESZTFUT√ÅS BEFEJEZVE")
    print("="*60)

    # A subprocess.run() returncode-ja jelzi a pytest eredm√©nyt
    # 0 = minden teszt sikeres
    # nem 0 = legal√°bb egy teszt elbukott
    
    if result.returncode == 0:
        print("\n‚úÖ Minden teszt sikeresen lefutott.")
    else:
        print("\n‚ö†Ô∏è  N√©h√°ny teszt elbukott vagy hiba√ºzenet t√∂rt√©nt.")
    
    print("\nüìÑ Gener√°lt riportok:")
    print(f"   ‚Ä¢ pytest HTML: {html_report}")
    print(f"   ‚Ä¢ Egyedi dashboard: dashboard/dashboard_{timestamp}.html")
    print(f"   ‚Ä¢ JSON adat: {json_report}")
    
    print("\nA r√©szletes tesztriportok a b√∂ng√©sz≈ëben megtekinthet≈ëek.")
    print("="*60 + "\n")
    
    return result.returncode

# main f√ºggv√©ny
# Ez fut le, amikor k√∂zvetlen√ºl futtatjuk a scriptet

if __name__ == "__main__":
    # Megh√≠vjuk a f≈ë f√ºggv√©nyt √©s kapunk egy exit code-ot
    exit_code = run_tests_with_reports()

    # Kil√©p√ºnk ezzel az exit code-dal
    # Ezt a CI/CD rendszer (GitHub Actions) haszn√°lja, hogy tudja, sikeres volt-e a teszt fut√°s
    sys.exit(exit_code)