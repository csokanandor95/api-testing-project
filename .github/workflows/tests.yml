# GitHub Actions CI/CD Workflow

# Automatikusan futtatja a teszteket minden push, pull vagy manuális futtatás esetén

# Működés:
# 1. Letölti a kódot a repo-ból
# 2. Beállítja a Python környezetet
# 3. Telepíti a függőségeket
# 4. Létrehozza a .env fájlt (API kulccsal)
# 5. Futtatja a teszteket
# 6. Generálja a riportokat
# 7. Elmenti az artifactokat (letölthetők a GitHub-ról)
# 8. Összefoglalót készít

name: API Tests CI/CD

on:
  push:
    branches: [ main, folder_structure_test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manuális futtatás engedélyezése

jobs:
  test:
    name: Run API Tests
    runs-on: ubuntu-latest # Virtuális gép típusa (legújabb Ubuntu Linux)
    
    steps:
    # 1. lépés: Kódbázis letöltése (checkout)
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    # 2. lépés: Python környezet beállítása
    - name: 🐍 Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'  # Gyorsabb futás (cache-eli a pip csomagokat)
    
    # 3. lépés: Függőségek telepítése
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 4. lépés: .env fájl létrehozása
    - name: 🔑 Create .env file
      run: |
        echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" > src/.env
    
    # 5. lépés: Időbélyeg generálás
    - name: ⏰ Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
    
    # 6. lépés: Riport mappák létrehozása
    - name: 📁 Create reports directories
      run: |
        mkdir -p reports
        mkdir -p dashboard
    
    # 7. lépés: Tesztek futtatása
    - name: 🧪 Run API tests
      working-directory: ./src
      env:
        TIMESTAMP: ${{ steps.timestamp.outputs.timestamp }}
      run: |
        pytest test_cases.py -v \
          --json-report \
          --json-report-file=../reports/report_${TIMESTAMP}.json \
          --html=../reports/report_${TIMESTAMP}.html \
          --self-contained-html
    
    # 8. lépés: Dashboard generálás
    - name: 📊 Generate dashboard
      if: always() # Mindig fusson, még ha a tesztek elbuknak is
      working-directory: ./src
      run: |
        python report_generator.py
    
    # 9. lépés: Riportok feltöltése (artifacts)
    - name: 📁 Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          reports/
          dashboard/
        retention-days: 30 # 30 napig tárolja
    
    # 10. lépés: Teszteredmény összegzés
    - name: 📋 Test Summary
      if: always()
      # working directory nem kell mert már a gyökérből megy
      run: |
        echo "##Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Legutolsó JSON fájl keresése
        JSON_FILE=$(ls -t reports/report_*.json 2>/dev/null | head -n1)
        
        if [ -f "$JSON_FILE" ]; then
          PASSED=$(jq '.summary.passed // 0' "$JSON_FILE")
          FAILED=$(jq '.summary.failed // 0' "$JSON_FILE")
          TOTAL=$(jq '.summary.total // 0' "$JSON_FILE")
          
          echo "✅ **Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Total:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FAILED" -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**All tests passed!**" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
        fi